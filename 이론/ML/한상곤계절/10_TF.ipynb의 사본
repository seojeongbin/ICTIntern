{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"10_TF.ipynb의 사본","provenance":[{"file_id":"1UHMEBKXyL48OMWQb4YU6c0uY9k6bpTL2","timestamp":1609942806370}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"vTROevT6p8Ac"},"source":["# 텐서플로우(Tensorflow 2)\r\n","\r\n","* 구글에서 만들고 있는 머신러닝 라이브러리(주로 딥러닝에 사용됨)"]},{"cell_type":"markdown","metadata":{"id":"kJ9--OlsqJ4G"},"source":["## 텐서플로우 기초"]},{"cell_type":"code","metadata":{"id":"yYOtbsnmsyNJ"},"source":["import tensorflow as tf\r\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Paw_dCvtxSJA","executionInfo":{"status":"ok","timestamp":1609853913007,"user_tz":-540,"elapsed":1505,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"2697d2e9-7ea5-4eac-f4c6-57e8cf575f8e"},"source":["print(tf.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.4.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EJtqiGpMrs_a"},"source":["### 난수 생성(random)\r\n","\r\n","* 신경망이 뭐에요? => \"숫자로 구성된 행렬\"\r\n","  * 입력 => [행렬계산] => 결과\r\n","  * 초기값은 '랜덤'으로 입력\r\n","* 참고 : https://reniew.github.io/13/"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wPyX-XTOru3q","executionInfo":{"status":"ok","timestamp":1609852988029,"user_tz":-540,"elapsed":1209,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"72dcd2ad-4b1e-4bc7-9d5d-3dcfcb7edc51"},"source":["# 균일(uniform)분포\r\n","# 균일 분포란? 최솟값과 최댓값 사이의 모든 수가 나올 확률이 '동일한 분포'\r\n","rand = tf.random.uniform([5], 0, 1)  #([행렬사이즈],최소값,최대값)\r\n","print(rand) # 텐서플로우에서 필요한 랜덤배열을 뽑는과정임 (균일분포라 하구 이거를)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tf.Tensor([0.7835418  0.06732571 0.88291967 0.09962666 0.5826036 ], shape=(5,), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0Wh9R1Q1t9No","executionInfo":{"status":"ok","timestamp":1609853084575,"user_tz":-540,"elapsed":1292,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"8b5ee679-a13d-4947-d100-fcbecf5be676"},"source":["# 정규(normal)분포\r\n","# 평균과 분산\r\n","rand = tf.random.normal([1], 0, 1) # ([행렬사이즈],평균,분산)\r\n","print(rand)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tf.Tensor([-0.54315054], shape=(1,), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OBCBqqC2qgkE"},"source":["### 뉴런\r\n","* 뉴련과 레이어\r\n","  * 입력 -> 뉴런 -> 출력\r\n","  * 입력 -> [뉴런, 뉴런, 뉴런, 뉴런, 뉴런] -> 출력 # 뉴런어러개 -> '레이어'\r\n","  * 입력 -> [[뉴런, 뉴런, 뉴런, 뉴런, 뉴런][뉴런, 뉴런, 뉴런, 뉴런, 뉴런]], -> 출력\r\n","* 뉴런의 구성요소\r\n","  * 입력(X)\r\n","  * 가중치(w)\r\n","  * 편향(b, bias)\r\n","  * 활성화 함수(f)\r\n","    * 시그모이드(sigmod)\r\n","    * ReLU(정류된 선형 함수, Rectified Linear Unit) # 통상적으로 이걸더 많이사용한다\r\n","  * 출력(Y)\r\n","\r\n","* 활성화 함수의 종류\r\n","  * https://hackernoon.com/everything-you-need-to-know-about-neural-networks-8988c3ee4491"]},{"cell_type":"markdown","metadata":{"id":"DsStJvegqk2W"},"source":["### AND\r\n","* [0,0] = 0\r\n","* [0,1] = 0\r\n","* [1,0] = 0\r\n","* [1,1] = 1"]},{"cell_type":"code","metadata":{"id":"jnR413QnyIkm"},"source":["def sigmoid(x):\r\n","  return (1 / (1+np.exp(-x))) # 시그모이드 만드는거 어렵지않지!"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kSu-xc3CxDMi","executionInfo":{"status":"ok","timestamp":1609854641999,"user_tz":-540,"elapsed":3492,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"4f6ef287-4a1c-4e28-8390-23b77c293d71"},"source":["x = np.array([[0,0], [0,1], [1,0], [1,1]])\r\n","y = np.array([[0],[0],[0],[1]])\r\n","w = tf.random.normal([2],0,1) # []들어갈 값 찾는게 중요. x에서 입력값이 두개니까 2.\r\n","b = tf.random.normal([1],0,1)\r\n","b_x = 1 # 편향의 초기값\r\n","\r\n","for i in range(2000): # 뉴런을 학습시키는게 2천번임 초기값이 맞을때까지... 경사하강법의 원리랑 거의유사\r\n","\r\n","  error_sum = 0\r\n","\r\n","  for j in range(4):\r\n","    output = sigmoid(np.sum(x[j] * w) + b_x + b) # b를 더함으로써 가중치 계속반영\r\n","    error = y[j][0] - output\r\n","    w = w + x[j] * 0.1 * error\r\n","    b = b + b_x * 0.1 * error\r\n","    error_sum += error\r\n","  \r\n","  if i % 400 == 0:\r\n","    print(f\"{i}\\tError{error_sum}\")\r\n","\r\n","print(w)\r\n","print(b)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0\tError[-0.2024486]\n","400\tError[-0.06660098]\n","800\tError[-0.03636044]\n","1200\tError[-0.02485026]\n","1600\tError[-0.01882374]\n","tf.Tensor([6.97489  6.971745], shape=(2,), dtype=float32)\n","tf.Tensor([-11.627893], shape=(1,), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GWI5RXwYzOKW","executionInfo":{"status":"ok","timestamp":1609854666063,"user_tz":-540,"elapsed":1256,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"16aac17e-8542-4caf-e23a-982f8e52f289"},"source":["for i in range(4):\r\n","  print(f\"X: {x[i]}, Y: {y[i]}, output: {sigmoid(np.sum(x[i]*w+b))}\") # 아웃풋은 학습률 의미인듯?"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X: [0 0], Y: [0], output: 7.945845267658207e-11\n","X: [0 1], Y: [0], output: 8.470913677831839e-08\n","X: [1 0], Y: [0], output: 8.497598281309762e-08\n","X: [1 1], Y: [1], output: 9.058315560222317e-05\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yUrPvbQUqk6-"},"source":["### OR"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9MD5lZpP0W1K","executionInfo":{"status":"ok","timestamp":1609854733112,"user_tz":-540,"elapsed":3363,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"04cb982e-4be4-47b4-8703-550ac7f56a4b"},"source":["x = np.array([[0,0], [0,1], [1,0], [1,1]])\r\n","y = np.array([[0],[1],[1],[1]]) # 여기 0111이란거만 다름\r\n","w = tf.random.normal([2],0,1)\r\n","b = tf.random.normal([1],0,1)\r\n","b_x = 1\r\n","\r\n","for i in range(2000):\r\n","\r\n","  error_sum = 0\r\n","\r\n","  for j in range(4):\r\n","    output = sigmoid(np.sum(x[j] * w) + b_x + b)\r\n","    error = y[j][0] - output\r\n","    w = w + x[j] * 0.1 * error\r\n","    b = b + b_x * 0.1 * error\r\n","    error_sum += error\r\n","  \r\n","  if i % 400 == 0:\r\n","    print(f\"{i}\\tError{error_sum}\")\r\n","\r\n","print(w)\r\n","print(b)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0\tError[0.22948575]\n","400\tError[-0.02594469]\n","800\tError[-0.0130818]\n","1200\tError[-0.00868758]\n","1600\tError[-0.00648701]\n","tf.Tensor([8.210312 8.21133 ], shape=(2,), dtype=float32)\n","tf.Tensor([-4.637303], shape=(1,), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4h-IH5mE0eTz","executionInfo":{"status":"ok","timestamp":1609854742679,"user_tz":-540,"elapsed":1274,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"dc0e0da6-610e-4d6a-b072-1713241fa0ea"},"source":["for i in range(4):\r\n","  print(f\"X: {x[i]}, Y: {y[i]}, output: {sigmoid(np.sum(x[i]*w+b))}\") # 아웃풋이 1에가까울수록 학습잘된거인듯?"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X: [0 0], Y: [0], output: 9.376681438602698e-05\n","X: [0 1], Y: [1], output: 0.25668404166425446\n","X: [1 0], Y: [1], output: 0.2564897633206474\n","X: [1 1], Y: [1], output: 0.9992134257647889\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ss_JhU4AqnzP"},"source":["### XOR"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KOGf-BqF0zc9","executionInfo":{"status":"ok","timestamp":1609854837336,"user_tz":-540,"elapsed":3151,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"fb52cb89-9f30-40be-ce26-4a83c628f41d"},"source":["x = np.array([[0,0], [0,1], [1,0], [1,1]])\r\n","y = np.array([[0],[1],[1],[0]])\r\n","w = tf.random.normal([2],0,1)\r\n","b = tf.random.normal([1],0,1)\r\n","b_x = 1\r\n","\r\n","for i in range(2000):\r\n","\r\n","  error_sum = 0\r\n","\r\n","  for j in range(4):\r\n","    output = sigmoid(np.sum(x[j] * w) + b_x + b)\r\n","    error = y[j][0] - output\r\n","    w = w + x[j] * 0.1 * error\r\n","    b = b + b_x * 0.1 * error\r\n","    error_sum += error\r\n","  \r\n","  if i % 400 == 0:\r\n","    print(f\"{i}\\tError{error_sum}\")\r\n","\r\n","print(w)\r\n","print(b)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0\tError[-1.3957572]\n","400\tError[-5.0663948e-05]\n","800\tError[-1.1920929e-07]\n","1200\tError[-1.1920929e-07]\n","1600\tError[-1.1920929e-07]\n","tf.Tensor([-0.10256399 -0.05128208], shape=(2,), dtype=float32)\n","tf.Tensor([-0.94871765], shape=(1,), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H1ZSNv_601Xz","executionInfo":{"status":"ok","timestamp":1609854840297,"user_tz":-540,"elapsed":771,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"07a0f9c2-3edf-465e-c997-d69a86fd954a"},"source":["for i in range(4):\r\n","  print(f\"X: {x[i]}, Y: {y[i]}, output: {sigmoid(np.sum(x[i]*w+b))}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X: [0 0], Y: [0], output: 0.13039902692193425\n","X: [0 1], Y: [1], output: 0.1246932913033833\n","X: [1 0], Y: [1], output: 0.11920298825972614\n","X: [1 1], Y: [0], output: 0.11392295661501356\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"P9_Vi8Rv1cIw"},"source":["### XOR(텐서플로우를 이용해서 풀어보자!)\r\n","* 딥러닝\r\n","  * 레이어를 구성하는게 가장 중요한 일!\r\n","  * 최적의 `w`와 `b` 결정\r\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lh40-eYp02rO","executionInfo":{"status":"ok","timestamp":1609856018906,"user_tz":-540,"elapsed":1236,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"e6048427-2cfa-4fa0-c2a8-723e1934fe24"},"source":["# 입력과 출력\r\n","x = np.array([[0,0], [0,1], [1,0], [1,1]])\r\n","y = np.array([[0],[1],[1],[0]]) # 출력도 정해주는거임. 학습을 시키는거라서.\r\n","\r\n","# 레이어를 설계 <- w,b는 우리가 정하는게 아니라 얘가 w,b를 만들어줌!\r\n","model = tf.keras.Sequential([\r\n","  tf.keras.layers.Dense(units=2, activation='sigmoid', input_shape=(2,)),\r\n","  tf.keras.layers.Dense(units=1, activation='sigmoid')\r\n","])\r\n","\r\n","# 레이어를 컴파일 : 어떤식으로 쌓냐인듯? 손실=오차제곱..... 잘 모르겠노. 손실율이 얼마나 줄었는지..\r\n","# model.compile(loss='mse')\r\n","model.compile(optimizer=tf.keras.optimizers.SGD(lr=0.1), loss='mse')\r\n","\r\n","# 레이어 확인\r\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential_9\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense_18 (Dense)             (None, 2)                 6         \n","_________________________________________________________________\n","dense_19 (Dense)             (None, 1)                 3         \n","=================================================================\n","Total params: 9\n","Trainable params: 9\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"feNYSn7s5K8i"},"source":["# 학습\r\n","history = model.fit(x, y, epochs=2000, batch_size=1) # 2천번 돌리는데 이걸 한번하겠다"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kbuZPoK12jCu","executionInfo":{"status":"ok","timestamp":1609856096022,"user_tz":-540,"elapsed":1326,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"9ecd4e96-daf3-492d-cc02-beedb5b0ff7e"},"source":["# 예측\r\n","model.predict(x)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.266558  ],\n","       [0.6525013 ],\n","       [0.8087398 ],\n","       [0.22650799]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"KBlgJeG14-pn","executionInfo":{"status":"ok","timestamp":1609856216603,"user_tz":-540,"elapsed":1719,"user":{"displayName":"sigmadream","photoUrl":"","userId":"11611818706289122316"}},"outputId":"da1cb71b-6a9c-4ec4-c006-0bffe3ec5537"},"source":["import matplotlib.pyplot as plt\r\n","plt.plot(history.history['loss'])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f69defcb518>]"]},"metadata":{"tags":[]},"execution_count":44},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"K2BhVftw6Gc9"},"source":[""],"execution_count":null,"outputs":[]}]}