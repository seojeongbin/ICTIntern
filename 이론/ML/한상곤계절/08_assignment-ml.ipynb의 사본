{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"08_assignment-ml.ipynb의 사본","provenance":[{"file_id":"1W90CrQYmh0XJ7bCvz8pFpYvknUr6j0cQ","timestamp":1609766041945}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"E8jeO3EFcqin"},"source":["# Spotify Popularity Prediction-ML Practice"]},{"cell_type":"code","metadata":{"id":"JcdZ1nEec2aC"},"source":["# 기본적으로 사용할 파이썬 패키지\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2eLBkekEcuDP"},"source":["# 1. 프로젝트 목표 및 목적\n","\n","* 노래의 인기를 예측해보자!"]},{"cell_type":"markdown","metadata":{"id":"On3LzKgicwQA"},"source":["# 2. 관련 데이터 수집"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q4_OCsqEcrls","executionInfo":{"status":"ok","timestamp":1609848684530,"user_tz":-540,"elapsed":4056,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"c30116dc-7dc3-41bb-eac2-66dd24863247"},"source":["# 데이터 다운로드(song_data.csv / song_info.csv)\n","!gdown --id \"1tFSeDdJYrOcVzQnxHQdJmV2Bp60rJ9O-\"\n","!gdown --id \"1NMpQ2nanbUUGOUo1PLBWgbxy59O69SZs\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading...\n","From: https://drive.google.com/uc?id=1tFSeDdJYrOcVzQnxHQdJmV2Bp60rJ9O-\n","To: /content/song_data.csv\n","2.22MB [00:00, 70.8MB/s]\n","Downloading...\n","From: https://drive.google.com/uc?id=1NMpQ2nanbUUGOUo1PLBWgbxy59O69SZs\n","To: /content/song_info.csv\n","100% 1.24M/1.24M [00:00<00:00, 79.4MB/s]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"s6PcqM57cySO"},"source":["# Pandas를 사용해서 CSV 파일 불러오기\n","# CSV 파일을 업로드 하세요\n","spotify_song_data= pd.read_csv(\"song_data.csv\")\n","spotify_song_info= pd.read_csv(\"song_info.csv\") \n","song_info=spotify_song_info.copy()\n","song_data=spotify_song_data.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":190},"id":"_WJylELAc5C3","executionInfo":{"status":"ok","timestamp":1609848684533,"user_tz":-540,"elapsed":4037,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"7d9b6f83-7029-492a-a8af-e53ac1cb292d"},"source":["song_info.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>song_name</th>\n","      <th>artist_name</th>\n","      <th>album_names</th>\n","      <th>playlist</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Boulevard of Broken Dreams</td>\n","      <td>Green Day</td>\n","      <td>Greatest Hits: God's Favorite Band</td>\n","      <td>00s Rock Anthems</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>In The End</td>\n","      <td>Linkin Park</td>\n","      <td>Hybrid Theory</td>\n","      <td>00s Rock Anthems</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Seven Nation Army</td>\n","      <td>The White Stripes</td>\n","      <td>Elephant</td>\n","      <td>00s Rock Anthems</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>By The Way</td>\n","      <td>Red Hot Chili Peppers</td>\n","      <td>By The Way (Deluxe Version)</td>\n","      <td>00s Rock Anthems</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>How You Remind Me</td>\n","      <td>Nickelback</td>\n","      <td>Silver Side Up</td>\n","      <td>00s Rock Anthems</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                    song_name  ...          playlist\n","0  Boulevard of Broken Dreams  ...  00s Rock Anthems\n","1                  In The End  ...  00s Rock Anthems\n","2           Seven Nation Army  ...  00s Rock Anthems\n","3                  By The Way  ...  00s Rock Anthems\n","4           How You Remind Me  ...  00s Rock Anthems\n","\n","[5 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":190},"id":"KMVlE2okdHnA","executionInfo":{"status":"ok","timestamp":1609848684534,"user_tz":-540,"elapsed":4026,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"6302f415-5ca1-46cf-ddaa-01ef4e400fb7"},"source":["song_data.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>song_name</th>\n","      <th>song_popularity</th>\n","      <th>song_duration_ms</th>\n","      <th>acousticness</th>\n","      <th>danceability</th>\n","      <th>energy</th>\n","      <th>instrumentalness</th>\n","      <th>key</th>\n","      <th>liveness</th>\n","      <th>loudness</th>\n","      <th>audio_mode</th>\n","      <th>speechiness</th>\n","      <th>tempo</th>\n","      <th>time_signature</th>\n","      <th>audio_valence</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Boulevard of Broken Dreams</td>\n","      <td>73</td>\n","      <td>262333</td>\n","      <td>0.005520</td>\n","      <td>0.496</td>\n","      <td>0.682</td>\n","      <td>0.000029</td>\n","      <td>8</td>\n","      <td>0.0589</td>\n","      <td>-4.095</td>\n","      <td>1</td>\n","      <td>0.0294</td>\n","      <td>167.060</td>\n","      <td>4</td>\n","      <td>0.474</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>In The End</td>\n","      <td>66</td>\n","      <td>216933</td>\n","      <td>0.010300</td>\n","      <td>0.542</td>\n","      <td>0.853</td>\n","      <td>0.000000</td>\n","      <td>3</td>\n","      <td>0.1080</td>\n","      <td>-6.407</td>\n","      <td>0</td>\n","      <td>0.0498</td>\n","      <td>105.256</td>\n","      <td>4</td>\n","      <td>0.370</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Seven Nation Army</td>\n","      <td>76</td>\n","      <td>231733</td>\n","      <td>0.008170</td>\n","      <td>0.737</td>\n","      <td>0.463</td>\n","      <td>0.447000</td>\n","      <td>0</td>\n","      <td>0.2550</td>\n","      <td>-7.828</td>\n","      <td>1</td>\n","      <td>0.0792</td>\n","      <td>123.881</td>\n","      <td>4</td>\n","      <td>0.324</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>By The Way</td>\n","      <td>74</td>\n","      <td>216933</td>\n","      <td>0.026400</td>\n","      <td>0.451</td>\n","      <td>0.970</td>\n","      <td>0.003550</td>\n","      <td>0</td>\n","      <td>0.1020</td>\n","      <td>-4.938</td>\n","      <td>1</td>\n","      <td>0.1070</td>\n","      <td>122.444</td>\n","      <td>4</td>\n","      <td>0.198</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>How You Remind Me</td>\n","      <td>56</td>\n","      <td>223826</td>\n","      <td>0.000954</td>\n","      <td>0.447</td>\n","      <td>0.766</td>\n","      <td>0.000000</td>\n","      <td>10</td>\n","      <td>0.1130</td>\n","      <td>-5.065</td>\n","      <td>1</td>\n","      <td>0.0313</td>\n","      <td>172.011</td>\n","      <td>4</td>\n","      <td>0.574</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                    song_name  song_popularity  ...  time_signature  audio_valence\n","0  Boulevard of Broken Dreams               73  ...               4          0.474\n","1                  In The End               66  ...               4          0.370\n","2           Seven Nation Army               76  ...               4          0.324\n","3                  By The Way               74  ...               4          0.198\n","4           How You Remind Me               56  ...               4          0.574\n","\n","[5 rows x 15 columns]"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WwmNZzB-dJIW","executionInfo":{"status":"ok","timestamp":1609848684536,"user_tz":-540,"elapsed":4018,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"f0562a07-f056-4987-dd48-e9a162e3cd07"},"source":["song_data.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["song_name           0\n","song_popularity     0\n","song_duration_ms    0\n","acousticness        0\n","danceability        0\n","energy              0\n","instrumentalness    0\n","key                 0\n","liveness            0\n","loudness            0\n","audio_mode          0\n","speechiness         0\n","tempo               0\n","time_signature      0\n","audio_valence       0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"markdown","metadata":{"id":"m1529BFRdU9z"},"source":["# 3. 데이터 전처리\n","\n","* 생략"]},{"cell_type":"markdown","metadata":{"id":"6v5gnHPbdX47"},"source":["# 4. 머신러닝을 위한 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"Dh4petDTdads"},"source":["song_data2 = song_data.drop(['song_popularity', 'song_name'], axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wbFUpsmlBs-t"},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(song_data2, song_data['song_popularity'])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JO9dpD4ddboH"},"source":["# 5. 학습"]},{"cell_type":"markdown","metadata":{"id":"7Txwm1wDdkbk"},"source":["## 5.1 선형 모델"]},{"cell_type":"code","metadata":{"id":"lss4G6ObdeV2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609848684539,"user_tz":-540,"elapsed":4000,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"46da77aa-6b1b-45fe-da38-bd7a54be930c"},"source":["# 선형회귀\n","from sklearn.linear_model import LinearRegression\n","lin = LinearRegression()\n","lin.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p4aduvmGPutu","executionInfo":{"status":"ok","timestamp":1609848684540,"user_tz":-540,"elapsed":3992,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"4b4a5f91-3edc-471c-97b1-ec91c139cf77"},"source":["# 선형평가\n","housing_predictions = lin.predict(X_test)\n","print(f\"예측결과 : {housing_predictions}\")\n","\n","from sklearn.metrics import mean_squared_error\n","\n","lin_mse = mean_squared_error(housing_predictions, y_test)\n","lin_rmse = np.sqrt(lin_mse)\n","print(lin_rmse)\n","\n","from sklearn.metrics import mean_absolute_error\n","lin_mae = mean_absolute_error(housing_predictions, y_test)\n","print(lin_mae)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["예측결과 : [52.04111445 56.55738942 58.49731169 ... 53.98646155 49.24082954\n"," 49.36387537]\n","21.3078102075997\n","16.83840823736244\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1bJSf9Gzdm-e"},"source":["## 5.2 SVM"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkLxmQ6IKfFN","executionInfo":{"status":"ok","timestamp":1609848727674,"user_tz":-540,"elapsed":47117,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"b7cb19d3-b0f3-489d-89fc-b2b2be277026"},"source":["# 비선형 svm 회귀\n","from sklearn.svm import SVC, SVR\n","# 다항식 특성 추가\n","model = SVR(kernel='poly')\n","model.fit(X_train, y_train)\n","\n","# 다항식 특성 추가 평가\n","print(f\"학습 : {model.score(X_train, y_train)}\")\n","print(f\"예측 : {model.score(X_test, y_test)}\")\n","\n","# RBF\n","model = SVR(kernel='rbf')\n","model.fit(X_train, y_train)\n","\n","# RBF 평가\n","print(f\"학습 : {model.score(X_train, y_train)}\")\n","print(f\"예측 : {model.score(X_test, y_test)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["학습 : -0.01490386097922225\n","예측 : -0.02320659372619116\n","학습 : -0.0068471179264675275\n","예측 : -0.014063419514616315\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"R-4arG_cQoUJ"},"source":["# 예측\n","predict = model.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CRMTVdxOQrMK","executionInfo":{"status":"ok","timestamp":1609848730376,"user_tz":-540,"elapsed":49803,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"2f1c3242-e918-46a7-b757-0dc78b825b21"},"source":["# svm의 평가\n","from sklearn.metrics import mean_absolute_error, mean_squared_error\n","\n","print(f\"mean_absolute_error : {mean_absolute_error(y_test, predict)}\")\n","print(f\"mean_squared_error : {mean_squared_error(y_test, predict)}\")\n","# RMSE\n","print(f\"root_mean_squared_error : {np.sqrt(mean_squared_error(y_test, predict))}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["mean_absolute_error : 17.103628336862336\n","mean_squared_error : 483.85054502538634\n","root_mean_squared_error : 21.99660303377288\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5ikQ7yRsdpLm"},"source":["## 5.3 결정 트리"]},{"cell_type":"code","metadata":{"id":"FxyhCAqUdq-B"},"source":["import graphviz\n","import multiprocessing\n","from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import cross_val_score\n","from sklearn.pipeline import make_pipeline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oeUjijemRUb7","executionInfo":{"status":"ok","timestamp":1609848733437,"user_tz":-540,"elapsed":52840,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"b3bb8fec-7b4a-4914-e6ca-e3bb469284e5"},"source":["model = DecisionTreeRegressor()\n","cross_val_score(estimator=model, X=song_data2, y=song_data['song_popularity'], cv=5, n_jobs=multiprocessing.cpu_count())"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-0.72322289, -0.3743187 , -0.13123082, -0.09348947, -0.03118611])"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uu4fpS81RkFe","executionInfo":{"status":"ok","timestamp":1609848733438,"user_tz":-540,"elapsed":52827,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"a552f3f6-c782-49f0-cbbc-09aa6cba2918"},"source":["model = DecisionTreeRegressor()\n","model.fit(song_data2, song_data['song_popularity'])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=None,\n","                      max_features=None, max_leaf_nodes=None,\n","                      min_impurity_decrease=0.0, min_impurity_split=None,\n","                      min_samples_leaf=1, min_samples_split=2,\n","                      min_weight_fraction_leaf=0.0, presort='deprecated',\n","                      random_state=None, splitter='best')"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"4tcifuTKRsn-"},"source":["from sklearn import tree\n","r = tree.export_text(decision_tree=model)\n","print(r)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ar8dm9fZXNjI"},"source":["tree.plot_tree(model)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":393},"id":"gEHGDiGka25r","executionInfo":{"status":"error","timestamp":1609849031557,"user_tz":-540,"elapsed":350910,"user":{"displayName":"정빈","photoUrl":"","userId":"12830367728912361593"}},"outputId":"3993b8cd-a884-40ca-a435-047d841bd913"},"source":["dot_data = tree.export_graphviz(decision_tree=model, feature_names=song_data2.columns.tolist(), filled=True, rounded=True, special_characters=True)\n","graph = graphviz.Source(dot_data)\n","graph"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-71-fd7a37705508>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdot_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexport_graphviz\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdecision_tree\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msong_data2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilled\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrounded\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mspecial_characters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mgraph\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgraphviz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSource\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdot_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mgraph\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/displayhook.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, result)\u001b[0m\n\u001b[1;32m    244\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_displayhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    245\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite_output_prompt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 246\u001b[0;31m             \u001b[0mformat_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmd_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_format_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    247\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_user_ns\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    248\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfill_exec_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/displayhook.py\u001b[0m in \u001b[0;36mcompute_format_data\u001b[0;34m(self, result)\u001b[0m\n\u001b[1;32m    148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m         \"\"\"\n\u001b[0;32m--> 150\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshell\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m     \u001b[0;31m# This can be set to True by the write_output_prompt method in a subclass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mformat\u001b[0;34m(self, obj, include, exclude)\u001b[0m\n\u001b[1;32m    171\u001b[0m             \u001b[0mmd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    172\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 173\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    174\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m                 \u001b[0;31m# FIXME: log the exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-9>\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mcatch_format_error\u001b[0;34m(method, self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;34m\"\"\"show traceback on failed format call\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m         \u001b[0;31m# don't warn on NotImplementedErrors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    336\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    337\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 338\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    339\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/graphviz/files.py\u001b[0m in \u001b[0;36m_repr_svg_\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_repr_svg_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 106\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpipe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'svg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_encoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpipe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/graphviz/files.py\u001b[0m in \u001b[0;36mpipe\u001b[0;34m(self, format, renderer, formatter)\u001b[0m\n\u001b[1;32m    126\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtext_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msource\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_encoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 128\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpipe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    129\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/graphviz/backend.py\u001b[0m in \u001b[0;36mpipe\u001b[0;34m(engine, format, data, renderer, formatter, quiet)\u001b[0m\n\u001b[1;32m    204\u001b[0m     \"\"\"\n\u001b[1;32m    205\u001b[0m     \u001b[0mcmd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcommand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 206\u001b[0;31m     \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcmd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcapture_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mquiet\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mquiet\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    207\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/graphviz/backend.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(cmd, input, capture_output, check, quiet, **kwargs)\u001b[0m\n\u001b[1;32m    152\u001b[0m             \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 154\u001b[0;31m     \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommunicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    155\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    156\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mquiet\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/subprocess.py\u001b[0m in \u001b[0;36mcommunicate\u001b[0;34m(self, input, timeout)\u001b[0m\n\u001b[1;32m    861\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    862\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 863\u001b[0;31m                 \u001b[0mstdout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstderr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_communicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mendtime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    864\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    865\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_communication_started\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/subprocess.py\u001b[0m in \u001b[0;36m_communicate\u001b[0;34m(self, input, endtime, orig_timeout)\u001b[0m\n\u001b[1;32m   1532\u001b[0m                         \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutExpired\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morig_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1534\u001b[0;31m                     \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1535\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mendtime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morig_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1536\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/selectors.py\u001b[0m in \u001b[0;36mselect\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    374\u001b[0m             \u001b[0mready\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    375\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 376\u001b[0;31m                 \u001b[0mfd_event_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_poll\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    377\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInterruptedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    378\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mready\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"zEMBFyoMdrgY"},"source":["## 5.4 랜덤 포레스트"]},{"cell_type":"code","metadata":{"id":"ci-OKemodtXB"},"source":["from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n","from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\n","from sklearn.model_selection import cross_validate"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NXigfapta6K4"},"source":["model = RandomForestRegressor()\n","cross_val = cross_validate(estimator=model, X=song_data2, y=song_data['song_popularity'], cv=5)\n","print(f\"avg test score: {cross_val['test_score'].mean()}\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T9X23mb6bS_i"},"source":["model = ExtraTreesRegressor()\n","cross_val = cross_validate(estimator=model, X=song_data2, y=song_data['song_popularity'], cv=5)\n","print(f\"avg test score: {cross_val['test_score'].mean()}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r-7FX_1vde2h"},"source":["# 6. 평가 및 튜닝\n","* 선형 모델, SVM, 결정 트리, 랜덤 포레스트의 평가 값을 확인\n","* 각 단계에서 평가과정 진행완료"]}]}